apiVersion: apps/v1                # apps/v1 is used for Deployments, ReplicaSets, StatefulSets, etc.
kind: Deployment                   # Deployment ensures desired number of Pods are running at all times

metadata:
  name: postgres-deployment        # Name of this deployment
  labels:
    app: postgres                  # Labels for grouping

spec:
  replicas: 1                      # Number of pod replicas (1 for database)
  selector:                        # Defines how to identify pods managed by this deployment
    matchLabels:
      app: postgres                # Must match the labels defined below in the Pod template

  template:                        # Template describes how each pod should look
    metadata:
      labels:
        app: postgres              # Label for the pod — must match selector above
    spec:
      containers:
        - name: postgres           # Container name (used inside the pod)
          image: postgres:15-alpine # Official Postgres image (lightweight Alpine variant)
          ports:
            - containerPort: 5432  # Port exposed by the container (default Postgres port)

          # Inject environment variables from ConfigMap and Secret
          envFrom:
            - configMapRef:
                name: postgres-config  # Loads POSTGRES_DB from ConfigMap
            - secretRef:
                name: postgres-secret  # Loads POSTGRES_USER and POSTGRES_PASSWORD from Secret

          # Mount persistent storage volume to the container
          volumeMounts:
            - name: postgres-storage
              mountPath: /var/lib/postgresql/data  # Default Postgres data directory

      # Define the volume to mount
      volumes:
        - name: postgres-storage
          persistentVolumeClaim:
            claimName: postgres-pvc  # Attach the previously created PVC

# - Deployment manages pods (creates, replaces, scales them).
# - If the pod crashes, Kubernetes automatically recreates it using this template.
# - Persistent storage ensures data isn’t lost even if pod restarts.
